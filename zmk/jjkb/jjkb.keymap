#define ZMK_POINTING_DEFAULT_MOVE_VAL 800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
&lt {
    flavor = "hold-preferred";
};
/ {
    chosen {
		zmk,physical-layout = &layout;
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "Base";
            bindings = <
&kp Q       &kp W       &kp E      &kp R &kp T    &kp Y      &kp U       &kp I          &kp O         &kp P
&kp A       &kp S       &kp D      &kp F &kp G    &kp H      &kp J       &kp K          &kp L         &kp RET 
&kp LSHFT   &kp Z       &kp X      &kp C &kp V    &kp B      &kp N       &kp M          &kp COMMA     &mt RSHFT DOT 
                                   &lt 2 LC(BSPC) &kp BSPC   &kp SPACE   &mo 1 
            >;
        };

        lower {
            display-name = "Symbols";
            bindings = <
&kp N1       &kp N2      &kp N3     &kp LS(EQUAL) &kp MINUS      &trans          &kp GRAVE   &kp RBKT       &kp LBKT      &kp BSLH
&kp N4       &kp N5      &kp N6     &kp LS(N8)    &kp SLASH      &kp LS(N4)      &kp SEMI    &kp LS(N0)     &kp LS(N9)    &kp RET 
&mt LSHFT N7 &kp N8      &kp N9     &kp EQUAL     &kp LS(N5)     &kp LS(N7)      &kp SQT     &kp LS(RBKT)   &kp LS(LBKT)  &kp RSHFT
                                   &trans         &kp BSPC   &kp SPACE   &trans   
            >;
        };

        upper {
            display-name = "Functions";
            bindings = <
&kp F1         &kp F2       &kp F3       &kp F4         &kp F5         &kp F6          &kp F7            &kp F8         &kp F9          &kp F10 
&mkp MB4       &mkp MB3     &mkp MB2     &mkp MB1       &msc SCRL_UP   &kp LEFT        &kp DOWN          &kp UP         &kp RIGHT       &kp RET 
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2   &msc SCRL_DOWN &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_UP   &mmv MOVE_RIGHT &kp RSHFT
                                   &trans         &kp BSPC   &kp SPACE   &trans   
            >;
        };
extra1 {
            status = "reserved";
        };

        extra2 {
            status = "reserved";
        };

    };
combos {
			compatible = "zmk,combos";

            combo_ctrl {
                timeout-ms = <50>;
                bindings = <&kp LGUI>;
                key-positions = <11 1>;
            };

            combo_alt {
                timeout-ms = <50>;
                bindings = <&kp LALT>;
                key-positions = <12 2>;
            };

            combo_gui {
                timeout-ms = <50>;
                bindings = <&kp LCTRL>;
                key-positions = <13 3>;
            };

            combo_ctrl_r {
                timeout-ms = <50>;
                bindings = <&kp RCTRL>;
                key-positions = <16 6>;
            };

            combo_alt_r {
                timeout-ms = <50>;
                bindings = <&kp RALT>;
                key-positions = <17 7>;
            };

            combo_gui_r {
                timeout-ms = <50>;
                bindings = <&kp RGUI>;
                key-positions = <18 8>;
            };
            combo_tab {
                timeout-ms = <50>;
                bindings = <&kp TAB>;
                key-positions = <12 13>;
            };

            combo_esc {
                timeout-ms = <50>;
                bindings = <&kp ESC>;
                key-positions = <16 17>;
            };
            combo_reset {
                timeout-ms = <1000>;
                bindings = <&bootloader>;
                key-positions = <00 20 9 29>; 
                layers = <1>;
            };
            combo_studio {
                timeout-ms = <1000>;
                bindings = <&studio_unlock>;
                key-positions = <00 20 9 29>; 
                layers = <0>;
            };
            
            combo_clear {
                timeout-ms = <1000>;
                bindings = <&bootloader>;
                key-positions = <20 23>;
                layers = <1>;
            };
            // 5 (N5) + 8 (N8) = 0 (N0)
            combo_zero {
                timeout-ms = <50>;
                bindings = <&kp N0>;
                key-positions = <11 21>;
                layers = <1>; 
            };
		};
};
